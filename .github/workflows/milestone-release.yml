name: Milestone-Driven Release

on:
    milestone:
        types: [closed]
    workflow_dispatch:
        inputs:
            milestone_title:
                description: "Milestone title (if not from milestone event)"
                required: false
                type: string
            dry_run:
                description: "Dry run mode - test without publishing (creates draft release)"
                required: false
                type: boolean
                default: false

env:
    PYTHON_VERSION: "3.11"
    NODE_VERSION: "18"

jobs:
    check-milestone:
        runs-on: ubuntu-latest
        outputs:
            milestone_title: ${{ steps.get_milestone.outputs.title }}
            milestone_number: ${{ steps.get_milestone.outputs.number }}
            has_release_commits: ${{ steps.check_commits.outputs.has_release_commits }}
            last_tag: ${{ steps.get_last_tag.outputs.tag }}
            dry_run: ${{ github.event.inputs.dry_run == 'true' }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Get milestone information
              id: get_milestone
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  if [ "${{ github.event_name }}" = "milestone" ]; then
                    MILESTONE_TITLE="${{ github.event.milestone.title }}"
                    MILESTONE_NUMBER="${{ github.event.milestone.number }}"
                  else
                    # For workflow_dispatch, use input or get the latest closed milestone
                    MILESTONE_TITLE="${{ github.event.inputs.milestone_title }}"
                    if [ -z "$MILESTONE_TITLE" ]; then
                      MILESTONE_TITLE=$(gh api repos/${{ github.repository }}/milestones --jq '.[0].title' --paginate)
                      MILESTONE_NUMBER=$(gh api repos/${{ github.repository }}/milestones --jq '.[0].number' --paginate)
                    else
                      MILESTONE_NUMBER=$(gh api repos/${{ github.repository }}/milestones --jq '.[] | select(.title == "'$MILESTONE_TITLE'") | .number')
                    fi
                  fi

                  echo "title=$MILESTONE_TITLE" >> $GITHUB_OUTPUT
                  echo "number=$MILESTONE_NUMBER" >> $GITHUB_OUTPUT
                  echo "Milestone: $MILESTONE_TITLE (#$MILESTONE_NUMBER)"

            - name: Get last tag
              id: get_last_tag
              run: |
                  LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
                  echo "tag=$LAST_TAG" >> $GITHUB_OUTPUT
                  echo "Last tag: $LAST_TAG"

            - name: Check for release-worthy commits
              id: check_commits
              run: |
                  # Check if there are any commits since last tag that would trigger a release
                  COMMITS_SINCE_TAG=$(git log ${{ steps.get_last_tag.outputs.tag }}..HEAD --oneline)

                  if [ -z "$COMMITS_SINCE_TAG" ]; then
                    echo "has_release_commits=false" >> $GITHUB_OUTPUT
                    echo "No commits since last tag"
                    exit 0
                  fi

                  # Check for conventional commits that would trigger a release
                  # Match: <hash> <type>[(scope)][!]: <description> OR BREAKING CHANGE anywhere
                  RELEASE_COMMITS=$(echo "$COMMITS_SINCE_TAG" | grep -E "^[0-9a-f]{7,40} (feat|fix|perf|refactor|style|docs|test|build|ci|chore)(\(.+\))?(!)?:|\bBREAKING CHANGE\b" || true)

                  if [ -z "$RELEASE_COMMITS" ]; then
                    echo "has_release_commits=false" >> $GITHUB_OUTPUT
                    echo "No release-worthy commits found"
                  else
                    echo "has_release_commits=true" >> $GITHUB_OUTPUT
                    echo "Found release-worthy commits:"
                    echo "$RELEASE_COMMITS"
                  fi

    release:
        needs: check-milestone
        if: needs.check-milestone.outputs.has_release_commits == 'true'
        runs-on: ubuntu-latest
        permissions:
            contents: write
            packages: write
            issues: read
            pull-requests: read
        outputs:
            version: ${{ steps.semantic_release.outputs.new_release_version }}
            published: ${{ steps.semantic_release.outputs.new_release_published }}
        steps:
            - name: Log dry run mode
              if: needs.check-milestone.outputs.dry_run == 'true'
              run: |
                  echo "🧪 **DRY RUN MODE ENABLED**"
                  echo "This workflow will:"
                  echo "  ✅ Create a GitHub release"
                  echo "  ✅ Build Python packages"
                  echo "  ✅ Create database server archives"
                  echo "  ❌ SKIP PyPI publishing"
                  echo ""
                  echo "This allows you to test the release workflow without publishing to PyPI."

            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install semantic-release
              run: |
                  npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

            - name: Install Python dependencies
              working-directory: ./ragora
              run: |
                  python -m pip install --upgrade pip
                  pip install build twine setuptools_scm[toml]

            - name: Build Python package
              working-directory: ./ragora
              run: |
                  python -m build

            - name: Run semantic-release
              id: semantic_release
              run: |
                  npx semantic-release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Python artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: python-packages
                  path: ragora/dist/*

            - name: Create database server archive
              id: create_db_archive
              run: |
                  if [ -d "tools/database_server" ]; then
                    VERSION="${{ steps.semantic_release.outputs.new_release_version }}"
                    TAR_ARCHIVE="database_server-${VERSION}.tar.gz"
                    ZIP_ARCHIVE="database_server-${VERSION}.zip"
                    
                    # Create tar.gz archive excluding unnecessary files
                    tar --exclude='*.pyc' \
                        --exclude='__pycache__' \
                        --exclude='.git' \
                        --exclude='node_modules' \
                        --exclude='*.log' \
                        --exclude='*.tmp' \
                        -czf "$TAR_ARCHIVE" \
                        -C tools database_server
                    
                    # Create zip archive with same exclusions
                    cd tools
                    zip -r "../$ZIP_ARCHIVE" database_server \
                        -x "*.pyc" \
                        -x "*__pycache__*" \
                        -x "*.git*" \
                        -x "*node_modules*" \
                        -x "*.log" \
                        -x "*.tmp"
                    cd ..
                    
                    echo "tar_archive=$TAR_ARCHIVE" >> $GITHUB_OUTPUT
                    echo "zip_archive=$ZIP_ARCHIVE" >> $GITHUB_OUTPUT
                    echo "Created archives: $TAR_ARCHIVE, $ZIP_ARCHIVE"
                  else
                    echo "Database server directory not found"
                    echo "tar_archive=" >> $GITHUB_OUTPUT
                    echo "zip_archive=" >> $GITHUB_OUTPUT
                  fi

            - name: Upload database server archives
              if: steps.create_db_archive.outputs.tar_archive != ''
              uses: actions/upload-artifact@v4
              with:
                  name: database-server-archives
                  path: |
                      ${{ steps.create_db_archive.outputs.tar_archive }}
                      ${{ steps.create_db_archive.outputs.zip_archive }}

    publish-pypi:
        needs: [check-milestone, release]
        if: needs.release.outputs.published == 'true' && needs.check-milestone.outputs.dry_run == 'false'
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            id-token: write
        steps:
            - name: Download Python artifacts
              uses: actions/download-artifact@v4
              with:
                  name: python-packages
                  path: ./dist

            - name: Publish to PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  skip-existing: true

            - name: Log success
              run: |
                  echo "✅ Successfully published to PyPI"

    skip-pypi-dry-run:
        needs: [check-milestone, release]
        if: needs.release.outputs.published == 'true' && needs.check-milestone.outputs.dry_run == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Log skipped PyPI publish
              run: |
                  echo "🧪 DRY RUN: Skipping PyPI publication"
                  echo "In a real release, the package would be published to PyPI now."

    attach-milestone-summary:
        needs: [check-milestone, release]
        if: needs.release.outputs.published == 'true'
        runs-on: ubuntu-latest
        permissions:
            contents: write
            issues: read
            pull-requests: read
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Download database server archives
              uses: actions/download-artifact@v4
              with:
                  name: database-server-archives
                  path: ./

            - name: Get milestone issues and PRs
              id: get_milestone_items
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  MILESTONE_NUMBER="${{ needs.check-milestone.outputs.milestone_number }}"
                  VERSION="${{ needs.release.outputs.version }}"

                  # Get issues
                  ISSUES=$(gh api repos/${{ github.repository }}/issues \
                    --jq '.[] | select(.milestone.number == '$MILESTONE_NUMBER' and .state == "closed") | "- #" + (.number | tostring) + " " + .title' \
                    --paginate || echo "")

                  # Get pull requests
                  PRS=$(gh api repos/${{ github.repository }}/pulls \
                    --jq '.[] | select(.milestone.number == '$MILESTONE_NUMBER' and .state == "closed") | "- #" + (.number | tostring) + " " + .title' \
                    --paginate || echo "")

                  # Combine and format
                  if [ -n "$ISSUES" ] || [ -n "$PRS" ]; then
                    MILESTONE_SUMMARY=$(printf "%s\n\n%s\n%s\n\n%s\n%s\n\n%s" \
                      "## Milestone Summary" \
                      "### Issues Closed" \
                      "$ISSUES" \
                      "### Pull Requests Merged" \
                      "$PRS" \
                      "*Milestone: ${{ needs.check-milestone.outputs.milestone_title }}*")
                  else
                    MILESTONE_SUMMARY=""
                  fi

                  # Save to file for later use
                  echo "$MILESTONE_SUMMARY" > milestone_summary.md

                  # Create JSON for GitHub API
                  MILESTONE_ITEMS="{\"issues\": [$(echo "$ISSUES" | sed 's/^- #\([0-9]*\) .*/\1/' | tr '\n' ',' | sed 's/,$//' | sed 's/,/","/g' | sed 's/^/"/' | sed 's/$/"/')], \"prs\": [$(echo "$PRS" | sed 's/^- #\([0-9]*\) .*/\1/' | tr '\n' ',' | sed 's/,$//' | sed 's/,/","/g' | sed 's/^/"/' | sed 's/$/"/')]}"
                  echo "milestone_items=$MILESTONE_ITEMS" >> $GITHUB_OUTPUT

            - name: Update release with milestone summary and installation instructions
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  VERSION="${{ needs.release.outputs.version }}"
                  RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/v$VERSION --jq '.id')

                  # Get current release body
                  CURRENT_BODY=$(gh api repos/${{ github.repository }}/releases/$RELEASE_ID --jq '.body')

                  # Create installation instructions  
                  REPO="${{ github.repository }}"
                  INSTALLATION_INSTRUCTIONS=$(printf "%s\n\n%s\n%s\n%s\n%s\n%s\n\n%s\n%s\n%s\n%s\n\n%s\n%s\n%s" \
                    "## 📦 Installation" \
                    "### From PyPI" \
                    "\`\`\`bash" \
                    "# Install specific version" \
                    "pip install ragora==${VERSION}" \
                    "\`\`\`" \
                    "### From GitHub Releases (Alternative)" \
                    "\`\`\`bash" \
                    "# Install wheel directly" \
                    "pip install https://github.com/${REPO}/releases/download/v${VERSION}/ragora-${VERSION}-py3-none-any.whl" \
                    "" \
                    "# Or install from source" \
                    "pip install https://github.com/${REPO}/releases/download/v${VERSION}/ragora-${VERSION}.tar.gz" \
                    "\`\`\`")

                  # Append milestone summary and installation instructions
                  MILESTONE_SUMMARY=$(cat milestone_summary.md)
                  NEW_BODY=$(printf "%s\n\n%s\n\n%s" "$CURRENT_BODY" "$INSTALLATION_INSTRUCTIONS" "$MILESTONE_SUMMARY")

                  # Update release
                  gh api repos/${{ github.repository }}/releases/$RELEASE_ID \
                    --method PATCH \
                    --field body="$NEW_BODY"

            - name: Attach database server archives to release
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  VERSION="${{ needs.release.outputs.version }}"

                  # Get release ID
                  RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/v$VERSION --jq '.id')

                  # Attach tar.gz archive
                  TAR_ARCHIVE=$(ls database_server-*.tar.gz 2>/dev/null || echo "")
                  if [ -n "$TAR_ARCHIVE" ] && [ -f "$TAR_ARCHIVE" ]; then
                    gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets \
                      --method POST \
                      --field name="$TAR_ARCHIVE" \
                      --field label="Database Server v$VERSION (tar.gz)" \
                      --data-binary @"$TAR_ARCHIVE" \
                      --header "Content-Type: application/gzip"
                    echo "✅ Database server tar.gz attached to release"
                  else
                    echo "⚠️ Database server tar.gz not found"
                  fi

                  # Attach zip archive
                  ZIP_ARCHIVE=$(ls database_server-*.zip 2>/dev/null || echo "")
                  if [ -n "$ZIP_ARCHIVE" ] && [ -f "$ZIP_ARCHIVE" ]; then
                    gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets \
                      --method POST \
                      --field name="$ZIP_ARCHIVE" \
                      --field label="Database Server v$VERSION (zip)" \
                      --data-binary @"$ZIP_ARCHIVE" \
                      --header "Content-Type: application/zip"
                    echo "✅ Database server zip attached to release"
                  else
                    echo "⚠️ Database server zip not found"
                  fi

    no-release-needed:
        needs: check-milestone
        if: needs.check-milestone.outputs.has_release_commits == 'false'
        runs-on: ubuntu-latest
        permissions:
            issues: write
        steps:
            - name: Comment on milestone
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  MILESTONE_NUMBER="${{ needs.check-milestone.outputs.milestone_number }}"

                  # Create a comment on the milestone
                  LAST_TAG="${{ needs.check-milestone.outputs.last_tag }}"
                  MILESTONE_TITLE="${{ needs.check-milestone.outputs.milestone_title }}"
                  COMMENT_BODY=$(printf "%s\n\n%s\n\n%s\n\n%s\n%s\n%s\n%s" \
                    "🚫 **No Release Needed**" \
                    "This milestone was closed, but no version bump was required because there were no release-worthy commits since the last tag (${LAST_TAG})." \
                    "**Milestone:** ${MILESTONE_TITLE}" \
                    "To trigger a release, ensure your commits follow [Conventional Commits](https://www.conventionalcommits.org/) format:" \
                    "- \`feat:\` for new features (minor version bump)" \
                    "- \`fix:\` for bug fixes (patch version bump)" \
                    "- \`BREAKING CHANGE:\` for breaking changes (major version bump)")

                  gh api repos/${{ github.repository }}/issues \
                    --jq '.[] | select(.milestone.number == '$MILESTONE_NUMBER') | .number' \
                    --paginate | head -1 | while read ISSUE_NUMBER; do
                    if [ -n "$ISSUE_NUMBER" ]; then
                      gh api repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments \
                        --method POST \
                        --field body="$COMMENT_BODY"
                      break
                    fi
                  done
